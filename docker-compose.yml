version: '3'
services:

     ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      PGDATA: /data/postgres
      volumes:
         ./postgres-order:/data/postgres
      expose:
        "5431"
      ports:
        "5431:5431"
      command: -p 5431
      restart: unless-stopped

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      PGDATA: /data/postgres
      volumes:
        ./postgres-order:/data/postgres
      ports:
        "5432:5432"
      command: -p 5431
      restart: unless-stopped

  mongo:
    container_name: mongo
    image: mongo:latest
    restart: unless-stopped
    expose:
      - "27017"
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db

  ## KeyCloak Config with MySQL Database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: keycloak
      MYSQL_USER: root
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: root
      DB_PASSWORD: 12345678
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8084:8084"
    volumes:
      - ./realms:/opt/jboss/keycloak/standalone/data
    depends_on:
      - keycloak-mysql

  ## Zookeeper and Kafka Configurations
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:6.0.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ##Eureka Server
  discovery-server:
    image: marrilyn16/discovery-server:v1
    container_name: discovery-server
#    pull_policy: always
    ports:
      - "8761:8761"
    depends_on:
      - zipkin

  api-gateway:
    image: marrilyn16/apigateway-service:v1
    container_name: apigateway-service
#    pull_policy: always
    ports:
      - "8085:8080"
    expose:
      - "8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    image: marrilyn16/product-service:v1
    container_name: product-service
#    pull_policy: always
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    depends_on:
      - mongo
      - discovery-server
      - keycloak

  ## Order-Service Docker Compose Config
  order-service:
    image: marrilyn16/order-service:v1
    container_name: order-service
#    pull_policy: always
    ports:
      - "8083:8080"
    expose:
      - "8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - postgres-order
      - kafka
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    image: marrilyn16/inventory-service:v1
    container_name: inventory-service
#    pull_policy: always
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway



  ## Notification-Service Docker Compose Config
  notification-service:
    image: marrilyn16/notification-service:v1
    container_name: notification-service
#    pull_policy: always
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - kafka
      - zipkin
      - discovery-server
      - api-gateway


